{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","injectedOnChange","type","onChange","App","handleChange","e","setState","searchField","target","value","state","fetch","then","res","json","users","console","log","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAGaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACA,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,eACJ,mCAAMJ,EAAMG,QAAQE,QACpB,4BAAIL,EAAMG,QAAQG,YCHbC,EAAW,SAAAP,GACpB,OACI,qBAAKC,UAAU,YAAf,SACKD,EAAMQ,SAASC,KAAK,SAAAN,GAAO,OACxB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCLtBM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,iBAAhB,OACrB,uBAAOX,UAAU,SACfY,KAAK,SACLF,YAAaA,EACbG,SAAaF,MC0CJG,E,kDA1Cb,aAAe,IAAD,8BACZ,gBAiBFC,aAAe,SAACC,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAhBtC,EAAKC,MAAQ,CACXH,YAAa,GACbX,SAAU,IALA,E,qDASd,WAAoB,IAAD,OACjBe,MAAM,8CACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEV,SAASmB,S,gCAE1C,WACEC,QAAQC,IAAIC,KAAKR,MAAMH,e,oBAOzB,WAAS,MAE2BW,KAAKR,MAA/Bd,EAFD,EAECA,SAAUW,EAFX,EAEWA,YACZY,EAAmBvB,EAASwB,QAAO,SAAA7B,GAAO,OAC9CA,EAAQE,KAAK4B,cAAcC,SAASf,EAAYc,kBAGlD,OADAL,QAAQC,IAAIE,GAEV,sBAAK9B,UAAU,MAAf,uBACG,kDACD,cAAC,EAAD,CACEU,YAAY,kBACZC,iBAAmBkB,KAAKd,eAExB,cAAC,EAAD,CAAUR,SAAYuB,IAN1B,gB,GA/BYI,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ae5bcf85.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\nexport const Card = props => (\n    <div className=\"card-container\">\n    <img src={`https://robohash.org/${props.monster.id}?set=set2`}/>\n        <h2> {props.monster.name}</h2>\n        <p>{props.monster.email}</p>\n    </div>\n);","import React from 'react';\nimport './card-list.styles.css';\nimport { Card } from '../card/card.component';\n\nexport const CardList = props => {\n    return( \n        <div className=\"card-list\">\n            {props.monsters.map( monster => (\n                <Card key={monster.id} monster={monster}/>\n            ))}\n        </div>\n    )\n}","import React from 'react';\nimport './search-box.styles.css';\n\nexport const SearchBox = ({ placeholder, injectedOnChange }) => (\n    <input className=\"search\"\n      type=\"search\" \n      placeholder={placeholder}\n      onChange = { injectedOnChange }\n    />\n)","import React, { Component } from 'react';\n\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      searchField: \"\",\n      monsters: []\n    };   \n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(res => res.json())\n    .then(users => this.setState({ monsters:users }))\n  }\n  componentDidUpdate(){\n    console.log(this.state.searchField)\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value })\n  }\n\n  render() {\n    // destructuring: const monsters = this.state.monsters\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    )\n    console.log(filteredMonsters);\n    return(\n      <div className=\"App\">\n\\        <h1>Monsters Rolodex</h1>\n        <SearchBox \n          placeholder=\"Search Monsters\"\n          injectedOnChange={ this.handleChange }\n        />\n          <CardList monsters = {filteredMonsters}/>\n\\    </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}